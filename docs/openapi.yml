openapi: 3.0.1
info:
  title: Hangzone API
  description: Hangzone API
  contact:
    name: HangForever 
    url: https://hangzone.io
    email: aaron.burdick@protonmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: /api
paths:
  /users/login:
    post:
      tags:
        - User and Authentication
      summary: Existing user login
      description: Login for existing user
      operationId: Login
      requestBody:
        description: Credentials to use
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserHangerRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: 'Not Implemented! - Unauthorized'
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      x-codegen-request-body-name: body
  /users:
    post:
      tags:
        - User and Authentication
      summary: Register a new user
      description: Register a new user
      operationId: CreateUser
      requestBody:
        description: Details of the new user to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
        required: true
      responses:
        201:
          description: Not implemented! - OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      x-codegen-request-body-name: body
  /users:
    get:
      tags:
        - User and Authentication
      summary: Get current user
      description: Gets the currently logged-in user
      operationId: GetCurrentUser
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
    put:
      tags:
        - User and Authentication
      summary: Update current user
      description: Not implemented! - Updated user information for current user
      operationId: UpdateCurrentUser
      requestBody:
        description: User details to update. At least **one** field is required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
      x-codegen-request-body-name: body
  /hangzones:
    get:
      tags:
        - Hangzones
      summary: Get Hangzones
      description: Get hangzones by some given parameters. Auth is optional
      operationId: GetHangzones
      parameters:
        - name: search
          in: query
          description: Search text to find a hangzone by similar name
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Pagination page
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleHangzonesResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
    post:
      tags:
        - Hangzones
      summary: Create a comment for an article
      description: Create a comment for an article. Auth is required
      operationId: CreateArticleComment
      parameters:
        - name: slug
          in: query
          description: Slug of the article that you want to create a comment for
          required: true
          schema:
            type: string
      requestBody:
        description: Comment you want to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCommentRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCommentResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
      security:
        - Token: []
      x-codegen-request-body-name: comment
components:
  schemas:
    LoginUserHanger:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    LoginUserHangerRequest:
      required:
        - user
      type: object
      properties:
        user_hanger:
          $ref: '#/components/schemas/LoginUser'
    NewUserHanger:
      required:
        - email
        - password
        - alias
      type: object
      properties:
        alias:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    NewUserRequest:
      required:
        - user
      type: object
      properties:
        user_hanger:
          $ref: '#/components/schemas/NewUser'
    UserHanger:
      required:
        - status_description
        - email
        - image
        - token
        - alias
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        alias:
          type: string
        status_description:
          type: string
        image:
          type: string
    UserResponse:
      required:
        - user
      type: object
      properties:
        user_hanger:
          $ref: '#/components/schemas/UserHanger'
    UpdateUserHanger:
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        alias:
          type: string
        status_description:
          type: string
        image:
          type: string
    UpdateUserRequest:
      required:
        - user
      type: object
      properties:
        user_hanger:
          $ref: '#/components/schemas/UpdateUser'
    ProfileResponse:
      required:
        - profile
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
    Profile:
      required:
        - status_description
        - following
        - image
        - alias
      type: object
      properties:
        alias:
          type: string
        status_description:
          type: string
        image:
          type: string
        following:
          type: boolean
    Article:
      required:
        - author
        - body
        - createdAt
        - description
        - favorited
        - favoritesCount
        - slug
        - tagList
        - title
        - updatedAt
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        favorited:
          type: boolean
        favoritesCount:
          type: integer
        author:
          $ref: '#/components/schemas/Profile'
    SingleArticleResponse:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/Article'
    MultipleArticlesResponse:
      required:
        - articles
        - articlesCount
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        articlesCount:
          type: integer
    NewArticle:
      required:
        - body
        - description
        - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
    NewArticleRequest:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/NewArticle'
    UpdateArticle:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
    UpdateArticleRequest:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/UpdateArticle'
    Comment:
      required:
        - author
        - body
        - createdAt
        - id
        - updatedAt
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        body:
          type: string
        author:
          $ref: '#/components/schemas/Profile'
    SingleCommentResponse:
      required:
        - comment
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
    MultipleHangzonesResponse:
      required:
        - comments
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    NewComment:
      required:
        - body
      type: object
      properties:
        body:
          type: string
    NewCommentRequest:
      required:
        - comment
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/NewComment'
    TagsResponse:
      required:
        - tags
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
    GenericErrorModel:
      required:
        - errors
      type: object
      properties:
        errors:
          required:
            - body
          type: object
          properties:
            body:
              type: array
              items:
                type: string
  securitySchemes:
    Token:
      type: apiKey
      description: "For accessing the protected API resources, you must have received\
        \ a a valid JWT token after registering or logging in. This JWT token must\
        \ then be used for all protected resources by passing it in via the 'Authorization'\
        \ header.\n\nA JWT token is generated by the API by either registering via\
        \ /users or logging in via /users/login.\n\nThe following format must be in\
        \ the 'Authorization' header :\n\n    Token xxxxxx.yyyyyyy.zzzzzz\n    \n"
      name: Authorization
      in: header

